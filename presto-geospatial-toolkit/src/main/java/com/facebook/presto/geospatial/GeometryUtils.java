/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.facebook.presto.geospatial;

import com.esri.core.geometry.Envelope;
import com.esri.core.geometry.Geometry;
import com.esri.core.geometry.GeometryCursor;
import com.esri.core.geometry.GeometryEngine;
import com.esri.core.geometry.ListeningGeometryCursor;
import com.esri.core.geometry.MultiVertexGeometry;
import com.esri.core.geometry.OperatorUnion;
import com.esri.core.geometry.Point;
import com.esri.core.geometry.Polygon;
import com.esri.core.geometry.ogc.OGCConcreteGeometryCollection;
import com.esri.core.geometry.ogc.OGCGeometry;
import com.esri.core.geometry.ogc.OGCGeometryCollection;
import com.esri.core.geometry.ogc.OGCPoint;
import com.esri.core.geometry.ogc.OGCPolygon;
import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import org.openjdk.jol.info.ClassLayout;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Queue;
import java.util.Set;

import static java.util.Objects.requireNonNull;

public final class GeometryUtils
{
    private static final long OGC_GEOMETRY_BASE_INSTANCE_SIZE = ClassLayout.parseClass(OGCGeometry.class).instanceSize();

    private GeometryUtils() {}

    /**
     * Copy of com.esri.core.geometry.Interop.translateFromAVNaN
     *
     * deserializeEnvelope needs to recognize custom NAN values generated by
     * ESRI's serialization of empty geometries.
     */
    private static double translateFromAVNaN(double n)
    {
        return n < -1.0E38D ? (0.0D / 0.0) : n;
    }

    /**
     * Copy of com.esri.core.geometry.Interop.translateToAVNaN
     *
     * JtsGeometrySerde#serialize must serialize NaN's the same way ESRI library does to achieve binary compatibility
     */
    public static double translateToAVNaN(double n)
    {
        return (Double.isNaN(n)) ? -Double.MAX_VALUE : n;
    }

    public static boolean isEsriNaN(double d)
    {
        return Double.isNaN(d) || Double.isNaN(translateFromAVNaN(d));
    }

    public static int getPointCount(OGCGeometry ogcGeometry)
    {
        GeometryCursor cursor = ogcGeometry.getEsriGeometryCursor();
        int points = 0;
        while (true) {
            com.esri.core.geometry.Geometry geometry = cursor.next();
            if (geometry == null) {
                return points;
            }

            if (geometry.isEmpty()) {
                continue;
            }

            if (geometry instanceof Point) {
                points++;
            }
            else {
                points += ((MultiVertexGeometry) geometry).getPointCount();
            }
        }
    }

    public static Envelope getEnvelope(OGCGeometry ogcGeometry)
    {
        GeometryCursor cursor = ogcGeometry.getEsriGeometryCursor();
        Envelope overallEnvelope = new Envelope();
        while (true) {
            Geometry geometry = cursor.next();
            if (geometry == null) {
                return overallEnvelope;
            }

            Envelope envelope = new Envelope();
            geometry.queryEnvelope(envelope);
            overallEnvelope.merge(envelope);
        }
    }

    public static boolean disjoint(Envelope envelope, OGCGeometry ogcGeometry)
    {
        GeometryCursor cursor = ogcGeometry.getEsriGeometryCursor();
        while (true) {
            Geometry geometry = cursor.next();
            if (geometry == null) {
                return true;
            }

            if (!GeometryEngine.disjoint(geometry, envelope, null)) {
                return false;
            }
        }
    }

    public static boolean contains(OGCGeometry ogcGeometry, Envelope envelope)
    {
        GeometryCursor cursor = ogcGeometry.getEsriGeometryCursor();
        while (true) {
            Geometry geometry = cursor.next();
            if (geometry == null) {
                return false;
            }

            if (GeometryEngine.contains(geometry, envelope, null)) {
                return true;
            }
        }
    }

    public static boolean isPointOrRectangle(OGCGeometry ogcGeometry, Envelope envelope)
    {
        if (ogcGeometry instanceof OGCPoint) {
            return true;
        }

        if (!(ogcGeometry instanceof OGCPolygon)) {
            return false;
        }

        Polygon polygon = (Polygon) ogcGeometry.getEsriGeometry();
        if (polygon.getPathCount() > 1) {
            return false;
        }

        if (polygon.getPointCount() != 4) {
            return false;
        }

        Set<Point> corners = new HashSet<>();
        corners.add(new Point(envelope.getXMin(), envelope.getYMin()));
        corners.add(new Point(envelope.getXMin(), envelope.getYMax()));
        corners.add(new Point(envelope.getXMax(), envelope.getYMin()));
        corners.add(new Point(envelope.getXMax(), envelope.getYMax()));

        for (int i = 0; i < 4; i++) {
            Point point = polygon.getPoint(i);
            if (!corners.contains(point)) {
                return false;
            }
        }

        return true;
    }

    public static OGCGeometry union(Collection<OGCGeometry> inputGeometries)
    {
        requireNonNull(inputGeometries, "inputGeometries was null");
        Int2ObjectMap<List<OGCGeometry>> geometriesByDimension = new Int2ObjectArrayMap<>(
                new int[] {0, 1, 2, 3}, // Only 4 possible dimensions
                new List[] {new ArrayList<>(), new ArrayList<>(), new ArrayList<>(), new ArrayList<>()});

        for (OGCGeometry collected : inputGeometries) {
            geometriesByDimension.get(collected.dimension()).add(collected);
        }

        List<OGCGeometry> outputs = new ArrayList<>();
        for (List<OGCGeometry> bufferedShapes : geometriesByDimension.values()) {
            if (!bufferedShapes.isEmpty()) {
                outputs.add(unionBatch(bufferedShapes));
            }
        }

        if (outputs.isEmpty()) {
            return null;
        }
        else if (outputs.size() == 1) {
            return outputs.get(0);
        }
        else {
            return new OGCConcreteGeometryCollection(outputs, null).flattenAndRemoveOverlaps().reduceFromMulti();
        }
    }

    private static OGCGeometry unionBatch(Collection<OGCGeometry> geometries)
    {
        ListeningGeometryCursor inputCursor = new ListeningGeometryCursor();
        GeometryCursor operator = OperatorUnion.local().execute(inputCursor, null, null);
        for (OGCGeometry item : geometries) {
            inputCursor.tick(item.getEsriGeometry());
            operator.tock();
        }
        return OGCGeometry.createFromEsriGeometry(operator.next(), null);
    }

    public static List<OGCGeometry> flatten(OGCGeometry geometry)
    {
        if (!(geometry instanceof OGCGeometryCollection)) {
            return Collections.singletonList(geometry);
        }
        List<OGCGeometry> output = new ArrayList<>();
        Queue<OGCGeometry> geometriesQueue = new ArrayDeque<>();
        geometriesQueue.offer(geometry);
        while (!geometriesQueue.isEmpty()) {
            OGCGeometryCollection geometryCollection = (OGCGeometryCollection) geometriesQueue.poll();
            for (int i = 0; i < geometryCollection.numGeometries(); i++) {
                OGCGeometry geometryN = geometryCollection.geometryN(i);
                if (!(geometryN instanceof OGCGeometryCollection)) {
                    output.add(geometryN);
                }
                else {
                    geometriesQueue.offer(geometryN);
                }
            }
        }
        return output;
    }

    // Do a best-effort attempt to estimate the memory size
    public static long getGeometryMemorySize(OGCGeometry geometry)
    {
        if (geometry == null) {
            return 0;
        }
        // Due to the following issue:
        // https://github.com/Esri/geometry-api-java/issues/192
        // We must check if the geometry is empty before calculating its size.  Once the issue is resolved
        // and we bring the fix into our codebase, we can remove this check.
        if (geometry.isEmpty()) {
            return OGC_GEOMETRY_BASE_INSTANCE_SIZE;
        }
        return geometry.estimateMemorySize();
    }
}
